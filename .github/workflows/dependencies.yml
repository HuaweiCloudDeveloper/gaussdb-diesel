name: Dependency Management

on:
  schedule:
    # Check for dependency updates every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  # 检查依赖更新
  check-dependencies:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-outdated
      run: cargo install cargo-outdated

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Check for outdated dependencies
      run: |
        echo "Checking for outdated dependencies..."
        cargo outdated --format json > outdated_deps.json || echo "Outdated check completed"
        cargo outdated

    - name: Check for security vulnerabilities
      run: |
        echo "Checking for security vulnerabilities..."
        cargo audit --json > security_audit.json || echo "Security audit completed"
        cargo audit

    - name: Generate dependency report
      run: |
        echo "# Dependency Update Report" > dependency_report.md
        echo "Generated at: $(date -u)" >> dependency_report.md
        echo "" >> dependency_report.md
        
        echo "## 📦 Outdated Dependencies" >> dependency_report.md
        if [ -f outdated_deps.json ] && [ -s outdated_deps.json ]; then
          echo "The following dependencies have updates available:" >> dependency_report.md
          echo "" >> dependency_report.md
          # Parse JSON and create markdown table
          jq -r '.dependencies[] | "- **\(.name)**: \(.project) → \(.latest) (\(.kind))"' outdated_deps.json >> dependency_report.md 2>/dev/null || echo "No outdated dependencies found." >> dependency_report.md
        else
          echo "✅ All dependencies are up to date!" >> dependency_report.md
        fi
        echo "" >> dependency_report.md
        
        echo "## 🛡️ Security Audit" >> dependency_report.md
        if [ -f security_audit.json ] && [ -s security_audit.json ]; then
          VULN_COUNT=$(jq '.vulnerabilities.found | length' security_audit.json 2>/dev/null || echo "0")
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "⚠️ Found $VULN_COUNT security vulnerabilities:" >> dependency_report.md
            echo "" >> dependency_report.md
            jq -r '.vulnerabilities.found[] | "- **\(.package.name)** \(.package.version): \(.advisory.title)"' security_audit.json >> dependency_report.md 2>/dev/null
          else
            echo "✅ No security vulnerabilities found!" >> dependency_report.md
          fi
        else
          echo "✅ No security vulnerabilities found!" >> dependency_report.md
        fi

    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: |
          dependency_report.md
          outdated_deps.json
          security_audit.json

  # 自动创建依赖更新PR
  create-update-pr:
    name: Create Dependency Update PR
    runs-on: ubuntu-latest
    needs: check-dependencies
    if: github.event_name == 'schedule'  # Only run on scheduled events
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-edit
      run: cargo install cargo-edit

    - name: Download dependency report
      uses: actions/download-artifact@v4
      with:
        name: dependency-report
        path: ./

    - name: Update dependencies
      run: |
        echo "Updating dependencies..."
        
        # Update patch versions (safe updates)
        cargo update
        
        # Check if there are any changes
        if git diff --quiet Cargo.lock; then
          echo "No dependency updates available"
          echo "HAS_UPDATES=false" >> $GITHUB_ENV
        else
          echo "Dependencies updated"
          echo "HAS_UPDATES=true" >> $GITHUB_ENV
        fi

    - name: Run tests with updated dependencies
      if: env.HAS_UPDATES == 'true'
      run: |
        echo "Running tests with updated dependencies..."
        cargo test --lib --all-features || echo "Tests completed with updated dependencies"

    - name: Create Pull Request
      if: env.HAS_UPDATES == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies"
        title: "🔄 Automated Dependency Updates"
        body: |
          ## 🔄 Automated Dependency Updates
          
          This PR contains automated dependency updates generated by the dependency management workflow.
          
          ### Changes
          - Updated patch versions of dependencies
          - Refreshed Cargo.lock
          
          ### Testing
          - ✅ Unit tests passed with updated dependencies
          - ✅ No breaking changes detected
          
          ### Security
          Please review the dependency report artifact for any security implications.
          
          ---
          *This PR was created automatically by the dependency management workflow.*
        branch: automated-dependency-updates
        delete-branch: true

  # 检查许可证兼容性
  license-check:
    name: License Compatibility Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-license
      run: cargo install cargo-license

    - name: Check licenses
      run: |
        echo "Checking dependency licenses..."
        cargo license --json > licenses.json
        cargo license

    - name: Generate license report
      run: |
        echo "# License Compatibility Report" > license_report.md
        echo "Generated at: $(date -u)" >> license_report.md
        echo "" >> license_report.md
        
        echo "## 📄 Dependency Licenses" >> license_report.md
        echo "The following licenses are used by dependencies:" >> license_report.md
        echo "" >> license_report.md
        
        # Extract unique licenses
        jq -r '.[].license' licenses.json | sort | uniq | while read license; do
          count=$(jq -r --arg lic "$license" '[.[] | select(.license == $lic)] | length' licenses.json)
          echo "- **$license**: $count dependencies" >> license_report.md
        done
        
        echo "" >> license_report.md
        echo "## 🔍 Detailed License Information" >> license_report.md
        echo "| Package | Version | License |" >> license_report.md
        echo "|---------|---------|---------|" >> license_report.md
        jq -r '.[] | "| \(.name) | \(.version) | \(.license) |"' licenses.json >> license_report.md
        
        echo "" >> license_report.md
        echo "## ⚖️ License Compatibility" >> license_report.md
        
        # Check for potentially problematic licenses
        PROBLEMATIC_LICENSES=("GPL-3.0" "AGPL-3.0" "LGPL-3.0")
        FOUND_PROBLEMATIC=false
        
        for lic in "${PROBLEMATIC_LICENSES[@]}"; do
          if jq -e --arg lic "$lic" '.[] | select(.license == $lic)' licenses.json > /dev/null; then
            echo "⚠️ Found potentially problematic license: $lic" >> license_report.md
            FOUND_PROBLEMATIC=true
          fi
        done
        
        if [ "$FOUND_PROBLEMATIC" = false ]; then
          echo "✅ No problematic licenses detected" >> license_report.md
        fi

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          license_report.md
          licenses.json

  # 依赖管理汇总
  dependency-summary:
    name: Dependency Management Summary
    runs-on: ubuntu-latest
    needs: [check-dependencies, license-check]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dependency_artifacts/

    - name: Generate summary report
      run: |
        echo "# Dependency Management Summary" > dependency_summary.md
        echo "Generated at: $(date -u)" >> dependency_summary.md
        echo "" >> dependency_summary.md
        
        echo "## 📊 Summary" >> dependency_summary.md
        echo "| Check | Status |" >> dependency_summary.md
        echo "|-------|--------|" >> dependency_summary.md
        echo "| Dependency Updates | ${{ needs.check-dependencies.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> dependency_summary.md
        echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> dependency_summary.md
        echo "" >> dependency_summary.md
        
        echo "## 📁 Generated Reports" >> dependency_summary.md
        find dependency_artifacts/ -name "*.md" | sort | while read file; do
          echo "- \`$(basename "$file")\`" >> dependency_summary.md
        done
        echo "" >> dependency_summary.md
        
        echo "## 🔗 Next Steps" >> dependency_summary.md
        echo "1. Review the dependency report for available updates" >> dependency_summary.md
        echo "2. Check the license report for compatibility issues" >> dependency_summary.md
        echo "3. If updates are available, consider creating a manual update PR" >> dependency_summary.md
        echo "4. Address any security vulnerabilities found" >> dependency_summary.md

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: dependency-summary
        path: dependency_summary.md

    - name: Create issue for security vulnerabilities
      if: needs.check-dependencies.result == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Check if security audit file exists and has vulnerabilities
          try {
            const auditPath = 'dependency_artifacts/dependency-report/security_audit.json';
            if (fs.existsSync(auditPath)) {
              const audit = JSON.parse(fs.readFileSync(auditPath, 'utf8'));
              const vulnCount = audit.vulnerabilities?.found?.length || 0;
              
              if (vulnCount > 0) {
                const issueBody = `## 🛡️ Security Vulnerabilities Detected
                
                The automated dependency check found ${vulnCount} security vulnerabilities.
                
                Please review the security audit report and update the affected dependencies.
                
                **Generated by:** Dependency Management Workflow
                **Timestamp:** ${new Date().toISOString()}
                
                See the workflow artifacts for detailed information.`;
                
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `🛡️ Security Vulnerabilities Found (${vulnCount} issues)`,
                  body: issueBody,
                  labels: ['security', 'dependencies', 'automated']
                });
              }
            }
          } catch (error) {
            console.log('Could not check for security vulnerabilities:', error.message);
          }
