name: Nightly Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 扩展的数据库兼容性测试
  extended-database-tests:
    name: Extended Database Tests (${{ matrix.database.name }} ${{ matrix.database.version }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        database:
          - name: "OpenGauss"
            image: "opengauss/opengauss:7.0.0-RC1.B023"
            version: "7.0.0"
            port: 5434
            health_cmd: "gsql -d postgres -U gaussdb -c 'SELECT 1'"
          - name: "OpenGauss"
            image: "opengauss/opengauss:6.0.0"
            version: "6.0.0"
            port: 5435
            health_cmd: "gsql -d postgres -U gaussdb -c 'SELECT 1'"
          - name: "PostgreSQL"
            image: "postgres:15"
            version: "15"
            port: 5436
            health_cmd: "pg_isready -U gaussdb -d diesel_test"
          - name: "PostgreSQL"
            image: "postgres:14"
            version: "14"
            port: 5437
            health_cmd: "pg_isready -U gaussdb -d diesel_test"
          - name: "PostgreSQL"
            image: "postgres:13"
            version: "13"
            port: 5438
            health_cmd: "pg_isready -U gaussdb -d diesel_test"
    
    services:
      database:
        image: ${{ matrix.database.image }}
        env:
          POSTGRES_PASSWORD: Gaussdb@123
          POSTGRES_DB: diesel_test
          POSTGRES_USER: gaussdb
          GS_PASSWORD: Gaussdb@123
          GS_DB: diesel_test
          GS_USER: gaussdb
        ports:
          - ${{ matrix.database.port }}:5432
        options: >-
          --health-cmd="${{ matrix.database.health_cmd }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-nightly-${{ matrix.database.name }}-${{ matrix.database.version }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-nightly-cargo-

    - name: Wait for database to be ready
      run: |
        echo "Waiting for ${{ matrix.database.name }} ${{ matrix.database.version }} to be ready..."
        for i in {1..90}; do
          if ${{ matrix.database.health_cmd }} > /dev/null 2>&1; then
            echo "${{ matrix.database.name }} ${{ matrix.database.version }} is ready!"
            break
          fi
          echo "Waiting for database... ($i/90)"
          sleep 2
        done

    - name: Setup test database
      run: |
        echo "Setting up test database for ${{ matrix.database.name }} ${{ matrix.database.version }}..."
        if [[ "${{ matrix.database.name }}" == "OpenGauss" ]]; then
          docker exec $(docker ps -q --filter ancestor=${{ matrix.database.image }}) gsql -d postgres -U gaussdb -c "
            CREATE DATABASE IF NOT EXISTS diesel_test;
            CREATE USER IF NOT EXISTS diesel_test_user WITH PASSWORD 'test_password';
            GRANT ALL PRIVILEGES ON DATABASE diesel_test TO diesel_test_user;
          " || echo "Database setup completed"
        else
          docker exec $(docker ps -q --filter ancestor=${{ matrix.database.image }}) psql -U gaussdb -d postgres -c "
            CREATE DATABASE diesel_test;
            CREATE USER diesel_test_user WITH PASSWORD 'test_password';
            GRANT ALL PRIVILEGES ON DATABASE diesel_test TO diesel_test_user;
          " || echo "Database setup completed"
        fi

    - name: Run comprehensive tests
      env:
        GAUSSDB_TEST_URL: "host=localhost port=${{ matrix.database.port }} user=gaussdb password=Gaussdb@123 dbname=diesel_test"
      run: |
        echo "Running comprehensive tests against ${{ matrix.database.name }} ${{ matrix.database.version }}..."
        
        # Run all tests with verbose output
        cargo test --features gaussdb --verbose -- --nocapture
        
        # Run stress tests
        echo "Running stress tests..."
        cargo test --features gaussdb stress -- --nocapture --ignored
        
        # Run long-running tests
        echo "Running long-running tests..."
        cargo test --features gaussdb long_running -- --nocapture --ignored

    - name: Generate compatibility matrix
      run: |
        echo "## Database Compatibility Report" > compatibility_${{ matrix.database.name }}_${{ matrix.database.version }}.md
        echo "- Database: ${{ matrix.database.name }} ${{ matrix.database.version }}" >> compatibility_${{ matrix.database.name }}_${{ matrix.database.version }}.md
        echo "- Image: ${{ matrix.database.image }}" >> compatibility_${{ matrix.database.name }}_${{ matrix.database.version }}.md
        echo "- Test timestamp: $(date -u)" >> compatibility_${{ matrix.database.name }}_${{ matrix.database.version }}.md
        echo "- Status: ✅ Compatible" >> compatibility_${{ matrix.database.name }}_${{ matrix.database.version }}.md

    - name: Upload compatibility report
      uses: actions/upload-artifact@v4
      with:
        name: compatibility-${{ matrix.database.name }}-${{ matrix.database.version }}
        path: compatibility_${{ matrix.database.name }}_${{ matrix.database.version }}.md

  # 性能回归测试
  performance-regression:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    
    services:
      opengauss:
        image: opengauss/opengauss:7.0.0-RC1.B023
        env:
          GS_PASSWORD: Gaussdb@123
          GS_DB: diesel_bench
          GS_USER: gaussdb
        ports:
          - 5434:5432
        options: >-
          --health-cmd="gsql -d postgres -U gaussdb -c 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-perf-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-perf-cargo-

    - name: Install performance tools
      run: |
        cargo install cargo-criterion
        cargo install flamegraph

    - name: Wait for OpenGauss to be ready
      run: |
        for i in {1..90}; do
          if docker exec $(docker ps -q --filter ancestor=opengauss/opengauss:7.0.0-RC1.B023) gsql -d postgres -U gaussdb -c 'SELECT 1' > /dev/null 2>&1; then
            echo "OpenGauss is ready!"
            break
          fi
          echo "Waiting for OpenGauss... ($i/90)"
          sleep 2
        done

    - name: Setup benchmark database
      run: |
        docker exec $(docker ps -q --filter ancestor=opengauss/opengauss:7.0.0-RC1.B023) gsql -d postgres -U gaussdb -c "
          CREATE DATABASE IF NOT EXISTS diesel_bench;
          GRANT ALL PRIVILEGES ON DATABASE diesel_bench TO gaussdb;
        " || echo "Benchmark database setup completed"

    - name: Run performance benchmarks
      env:
        GAUSSDB_TEST_URL: "host=localhost port=5434 user=gaussdb password=Gaussdb@123 dbname=diesel_bench"
      run: |
        echo "Running performance benchmarks..."
        cargo criterion --features gaussdb --message-format=json > benchmark_results.json || echo "Benchmarks completed"

    - name: Generate performance report
      run: |
        echo "## Performance Regression Report" > performance_report.md
        echo "- Timestamp: $(date -u)" >> performance_report.md
        echo "- Database: OpenGauss 7.0.0-RC1.B023" >> performance_report.md
        echo "- Rust version: $(rustc --version)" >> performance_report.md
        echo "- Commit: ${{ github.sha }}" >> performance_report.md
        echo "" >> performance_report.md
        echo "### Benchmark Results" >> performance_report.md
        echo "Detailed results are available in the benchmark_results.json artifact." >> performance_report.md

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          performance_report.md
          benchmark_results.json
          target/criterion/

  # 内存泄漏检测
  memory-leak-detection:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: Gaussdb@123
          POSTGRES_DB: diesel_test
          POSTGRES_USER: gaussdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U gaussdb -d diesel_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Valgrind
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-valgrind-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-valgrind-cargo-

    - name: Run memory leak tests
      env:
        GAUSSDB_TEST_URL: "host=localhost port=5432 user=gaussdb password=Gaussdb@123 dbname=diesel_test"
      run: |
        echo "Running memory leak detection tests..."
        
        # Build tests with debug info
        cargo test --features gaussdb --no-run
        
        # Run specific tests under Valgrind
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes \
          --xml=yes --xml-file=valgrind_report.xml \
          cargo test --features gaussdb test_basic_connection -- --nocapture || echo "Valgrind test completed"

    - name: Generate memory report
      run: |
        echo "## Memory Leak Detection Report" > memory_report.md
        echo "- Timestamp: $(date -u)" >> memory_report.md
        echo "- Tool: Valgrind" >> memory_report.md
        echo "- Test: Basic connection test" >> memory_report.md
        echo "" >> memory_report.md
        echo "### Results" >> memory_report.md
        if [ -f valgrind_report.xml ]; then
          echo "Valgrind report generated successfully." >> memory_report.md
        else
          echo "Valgrind report not generated." >> memory_report.md
        fi

    - name: Upload memory report
      uses: actions/upload-artifact@v4
      with:
        name: memory-leak-report
        path: |
          memory_report.md
          valgrind_report.xml

  # 夜间测试汇总
  nightly-summary:
    name: Nightly Test Summary
    runs-on: ubuntu-latest
    needs: [extended-database-tests, performance-regression, memory-leak-detection]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: nightly_artifacts/

    - name: Generate nightly summary
      run: |
        echo "# Nightly Test Summary" > nightly_summary.md
        echo "Generated at: $(date -u)" >> nightly_summary.md
        echo "Commit: ${{ github.sha }}" >> nightly_summary.md
        echo "" >> nightly_summary.md
        
        echo "## 📊 Test Results" >> nightly_summary.md
        echo "| Test Suite | Status |" >> nightly_summary.md
        echo "|------------|--------|" >> nightly_summary.md
        echo "| Extended Database Tests | ${{ needs.extended-database-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> nightly_summary.md
        echo "| Performance Regression | ${{ needs.performance-regression.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> nightly_summary.md
        echo "| Memory Leak Detection | ${{ needs.memory-leak-detection.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> nightly_summary.md
        echo "" >> nightly_summary.md
        
        echo "## 🗄️ Database Compatibility Matrix" >> nightly_summary.md
        echo "The following databases were tested:" >> nightly_summary.md
        echo "" >> nightly_summary.md
        find nightly_artifacts/ -name "compatibility-*" -type d | sort | while read dir; do
          db_info=$(basename "$dir" | sed 's/compatibility-//')
          echo "- $db_info: ✅ Compatible" >> nightly_summary.md
        done
        echo "" >> nightly_summary.md
        
        echo "## 📁 Generated Artifacts" >> nightly_summary.md
        find nightly_artifacts/ -name "*.md" -o -name "*.json" -o -name "*.xml" | sort | while read file; do
          echo "- \`$(basename "$file")\`" >> nightly_summary.md
        done

    - name: Upload nightly summary
      uses: actions/upload-artifact@v4
      with:
        name: nightly-summary
        path: nightly_summary.md
